/*
Copyright (C) 2001, 2010 United States Government as represented by 
the Administrator of the National Aeronautics and Space Administration. 
All Rights Reserved. 
*/
package gov.nasa.worldwind.util.webview;

import gov.nasa.worldwind.avlist.AVList;
import gov.nasa.worldwind.render.*;

import javax.swing.event.*;
import java.awt.*;
import java.awt.event.*;
import java.net.URL;

/**
 * WebView provides an interface for loading web content, laying out and rendering the content as an OpenGL texture, and
 * interacting with the rendered content. This functionality is divided into four main tasks: <ul> <li>Loading web
 * content into a WebView's frame.</li> <li>Sending input events to the WebView's frame.</li> <li>Receiving hyperlink
 * events from the WebView's frame.</li> <li>Receiving a rendered representation of the WebView's frame.</li> </ul>
 * <p/>
 * A WebView is configured by specifying its text content and the size of the WebView's frame. The text may be an HTML
 * document, an HTML fragment, simple text, {@code null}, or another text format supported by the implementation. The
 * size of the WebView's frame is specified in pixels, and may not exceed an implementation-defined maximum. Most
 * implementations define the maximum value to be 2048 - the maximum texture size on most platforms.
 * <p/>
 * The user can interact with the WebView using the mouse and keyboard. The application must send input events to the
 * WebView's frame because WebView is not associated with any windowing system. Input events are received and processed
 * in an implementation-defined manner. Sending input events to the WebView causes the WebView to notify its hyperlink
 * listeners about any hyperlink events generated by user interaction.
 * <p/>
 * The WebView provides a representation of itself as an OpenGL texture. On machines that support non-power-of-two sized
 * textures, this texture has dimensions equal to the WebView's frame size. Otherwise, the texture's dimensions are the
 * smallest power-of-two that captures the WebView's frame size. The WebView's texture representation is standard
 * two-dimensional OpenGL texture that may be mapped onto any OpenGL primitive using texture coordinates.
 * <p/>
 * When the WebView's texture representation changes as a result of an internal event it fires a property change event
 * with the key {@link gov.nasa.worldwind.avlist.AVKey#REPAINT}. This can happen from web content loading, user
 * interaction, or from a programmatic change such as JavaScript.
 * <p/>
 * The following examples class demonstrates how to use WebView to draw screen-aligned web content in World Wind.
 * <p/>
 * <code>
 * <pre>
 * public class OGLScreenBrowser implements Renderable
 * {
 *      protected WebView webView;
 *      protected Point screenPoint = new Point(100, 100);
 *      protected Dimension screenSize = new Dimension(600, 400);
 *      <br/>
 *      public OGLScreenBrowser()
 *      {
 *          WebViewFactory factory = (WebViewFactory) WorldWind.createConfigurationComponent(AVKey.WEB_VIEW_FACTORY);
 *          this.webView = factory.createWebView(this.screenSize);
 *          this.webView.setHTMLString("<HTML><HEAD/><BODY>Hello, World!</BODY></HTML>", null);
 *      }
 *      <br/>
 *      public void render(DrawContext dc)
 *      {
 *          // This simple example does not demonstrate how to implement picking.
 *          if (dc.isPickingMode())
 *              return;
 *          <br/>
 *          GL2 gl = dc.getGL();
 *          gl.glPushAttrib(GL.GL_COLOR_BUFFER_BIT // For alpha enable, blend enable, alpha func, blend func.
 *              | GL2.GL_ENABLE_BIT // For depth test disable.
 *              | GL2.GL_TEXTURE_BIT // For texture enable, texture binding.
 *              | GL2.GL_TRANSFORM_BIT); // For matrix mode.
 *          gl.glMatrixMode(GLMatrixFunc.GL_PROJECTION);
 *          gl.glPushMatrix();
 *          gl.glLoadIdentity();
 *          // Drawn in a parallel projection sized to fit the viewport.
 *          gl.glOrtho(0d, dc.getView().getViewport().width, 0d, dc.getView().getViewport().height, -1d, 1d);
 *          gl.glMatrixMode(GLMatrixFunc.GL_MODELVIEW);
 *          gl.glPushMatrix();
 *          gl.glLoadIdentity();
 *          // Don't do depth comparisons or update the depth buffer.
 *          gl.glDisable(GL.GL_DEPTH_TEST);
 *          <br/>
 *          // Translate to the balloon's screen origin. Use integer coordinates to ensure that the image texels are
 *          // aligned exactly with screen pixels.
 *          gl.glTranslatef(this.screenPoint.x, this.screenPoint.y, 0);
 *          <br/>
 *          // Don't render anything until the WebView has a texture representation.
 *          WWTexture texture = this.webView.getTextureRepresentation(dc);
 *          if (texture == null)
 *              return;
 *          <br/>
 *          // Apply the WebView's texture representation.
 *          gl.glEnable(GL.GL_TEXTURE_2D);
 *          texture.bind(dc);
 *          <br/>
 *          // Draw a rectangle with the dimensions of the WebView at the screen point. The WebView's lower left corner
 *          // is placed at the screen point. Use integer coordinates to ensure that the image texels are aligned
 *          // exactly with screen pixels.
 *          TextureCoords texCoords = texture.getTexCoords();
 *          gl.glBegin(GL2.GL_QUADS);
 *          gl.glTexCoord2f(texCoords.left(), texCoords.bottom());
 *          gl.glVertex2i(0, 0);
 *          gl.glTexCoord2f(texCoords.right(), texCoords.bottom());
 *          gl.glVertex2i(this.screenSize.width, 0);
 *          gl.glTexCoord2f(texCoords.right(), texCoords.top());
 *          gl.glVertex2i(this.screenSize.width, this.screenSize.height);
 *          gl.glTexCoord2f(texCoords.left(), texCoords.top());
 *          gl.glVertex2i(0, this.screenSize.height);
 *          gl.glEnd();
 *          <br/>
 *          gl.glMatrixMode(GLMatrixFunc.GL_MODELVIEW);
 *          gl.glPopMatrix();
 *          gl.glMatrixMode(GLMatrixFunc.GL_PROJECTION);
 *          gl.glPopMatrix();
 *          gl.glPopAttrib();
 *      }
 * }
 * </pre>
 * </code>
 *
 * @author dcollins
 * @version $Id: WebView.java 14158 2010-11-29 19:30:23Z dcollins $
 */
public interface WebView extends AVList
{
    /**
     * Specifies the WebView's text content. The specified string may be one of the following: <ul> <li>HTML
     * document</li> <li>HTML fragment</li> <li>Simple text</li> <li>{@code null}</li> </ul> The WebView displays
     * nothing if the string is null. If the URL is null, the WebView interprets relative URLs using the current working
     * directory.
     * <p/>
     * If the application sends input events to the WebView, the user may navigate away from the specified HTML content
     * by interacting with links or buttons in the content.
     *
     * @param string  The WebView's text content, or {@code null} to display an empty WebView.
     * @param baseURL The URL used to resolve relative URLs in the text content, or {@code null} to use the current
     *                working directory.
     */
    void setHTMLString(String string, URL baseURL);

    /**
     * Returns the size in pixels of the WebView's frame. This returns {@code null} if the WebView's frame size is
     * unspecified.
     *
     * @return The size of the WebView's frame in pixels, or {@code null} if it's unspecified.
     *
     * @see #setFrameSize(java.awt.Dimension)
     */
    Dimension getFrameSize();

    /**
     * Specifies the size in pixels of the WebView's frame.
     *
     * @param size The size of the WebView's frame in pixels.
     *
     * @throws IllegalArgumentException if {@code size} is {@code null}, if the width or height are less than one, or if
     *                                  the width or height exceed the implementation-defined maximum.
     */
    void setFrameSize(Dimension size);

    /**
     * Sends the specified input event to the WebView. Which events the WebView's responds to and how it responds is
     * implementation-defined. Typical implementations respond to {@link java.awt.event.KeyEvent}, {@link
     * java.awt.event.MouseEvent}, and {@link java.awt.event.MouseWheelEvent}.
     * <p/>
     * The screen coordinates for a {@code MouseEvent} must be transformed into the WebView's local coordinate system,
     * which has its origin in the lower left corner with the X-axis pointing right and the Y-axis pointing up.
     * <p/>
     * This does nothing if the specified event is {@code null}.
     *
     * @param event the event to send.
     */
    void sendEvent(InputEvent event);

    /**
     * Adds a hyperlink listener to the WebView. The hyperlink listener receives a {@link
     * javax.swing.event.HyperlinkEvent} when a link is entered, exited, or selected. If the listener is added to the
     * WebView more than once it receives one event for the number of times it was added.
     * <p/>
     * In order to generate hyperlink events, the caller must send input events to the WebView by calling {@link
     * #sendEvent(java.awt.event.InputEvent)}.
     * <p/>
     * This does nothing if the listener is {@code null}.
     *
     * @param listener The hyperlink listener to add.
     */
    void addHyperlinkListener(HyperlinkListener listener);

    /**
     * Removes a hyperlink listener from the WebView. The specified listener ceases to receive any hyperlink events from
     * the WebView. If the listener is added to the WebView more than once this removes the last entry added but retains
     * all others.
     * <p/>
     * This does nothing if the listener is {@code null}, or if the listener is not attached to the WebView.
     *
     * @param listener The hyperlink listener to remove.
     *
     * @see #addHyperlinkListener(javax.swing.event.HyperlinkListener)
     */
    void removeHyperlinkListener(HyperlinkListener listener);

    /**
     * Returns a layed out and rendered representation of the WebView's content as a {@link
     * gov.nasa.worldwind.render.WWTexture}. The texture's image source is the WebView, and its dimensions are large
     * enough to capture the WebView's frame size (see {@link #setFrameSize(java.awt.Dimension)}.
     * <p/>
     * On machines that support non-power-of-two sized textures, the texture's dimensions are always equal to the
     * WebView's frame size. Otherwise, the texture's dimensions are the smallest power-of-two that captures the
     * WebView's frame size.
     *
     * @param dc The draw context the WebView is associated with.
     *
     * @return A rendered representation of the WebView's frame as a {@code WWTexture}.
     */
    WWTexture getTextureRepresentation(DrawContext dc);
}
